跳跃表概念：
    如果用有序链表来表示一个含有n个元素的有序表S，则在最坏情况下，搜索S中的一个元素需要Ω(n)时间。提高有序链表效率的一个技巧是在
有序链表的部分节点处增设附加指针以提高其搜索性能。在增设附加指针的有序链表中搜素一个元素时，可借助于附加指针跳过链表中的若干
节点，加快搜索速度。这种增加了向前附加指针的有序链表称为跳跃表。跳跃表可在O(logn)平均时间内支持关于有序集的搜索、插入和删除
等运算。例如，图1是一个没有附加指针的有序链表，而图2是在图1的基础上增加了跳跃一个节点的附加指针的跳跃表，图3则是在图2的基础
上又增加了跳跃三个节点的附加指针的跳跃表。
    在跳跃表中，如果一个节点有k+1个指针，则称此节点为一个k级节点。
    以图3中的跳跃表为例，来看如何在该跳跃表中搜索元素8。从该跳跃表的最高级，即第2级开始搜索。利用2级指针发现元素8位于节点7和19
之间，此时在节点7处下降到1级指针继续搜索，发现元素8位于节点7和13之间，最后，在节点7处降至0级指针进行搜索，发现元素8位于节点
7和11之间，从而知道元素8不在所搜索的集合S中。

相关原理：
    在一般情况下，给定一个含有n个元素的有序链表，可以将它改造成一个完全跳跃表，使得每一个k级节点含有k+1个指针，分别跳过2^k-1、
2^(k-1)-1、...、2^0-1个中间节点。第i个k级节点安排在跳跃表的位置i·2^k处，i>=0。这样就可以在时间O(logn)内完成集合成员的搜索
运算。在一个完全跳跃表中，最高级节点是┌logn┐级节点。
    完全跳跃表与完全二叉搜索树的情形非常类似，它虽然可以有效地支持成员搜索运算，但不适应于集合动态变化的情况。集合元素的插入和删除
运算会破坏完全跳跃表原有的平衡状态，影响后序元素搜索的效率。为了在动态变化中维持跳跃表中附加指针的平衡性，必须使跳跃表中k级节点
数维持在总结点数的一定比例范围内。注意到在一个完全跳跃表中，50%的指针是0级指针，25%的指针是1级指针，...，100/2^(k+1)是k级指针，
因此在插入一个元素时，以概率1/2引入一个0级节点，以概率1/4引入一个1级节点，...，以概率1/2^(k+1)引入一个k级节点，这样就可以在插
入或删除一个元素时，通过对跳跃表的局部修改来维持其平衡性。图4是遵循上述原则的跳跃表的例子，如果希望在图4所示的跳跃表中插入一个
元素8，则先在跳跃表中搜索其插入位置，经搜索发现应在节点7和11之间插入元素8，此时在节点7和11之间增加一个存储元素8的新节点，并以
随机的方式确定新节点的级别。例如，如果元素8时作为一个2级节点插入，则应对图4中虚线相交的指针进行调整如图5所示。如果新插入的节点
是一个1级节点，则只需要修改2个指针，如图6所示。图4中与虚线相交的指针是在插入新节点后有可能被修改的指针，这些指针可在搜索元素插
入位置时动态地保存起来，以供实施插入时使用。
    在上述算法中，一个关键的问题是如何随即地生成新插入节点的级别。注意到，在一个完全跳跃表中，i级节点有一半的概率同时也是i+1级节点。
为了维持跳跃表的平衡性，可以事先确定一个实数0<p<1，并要求在跳跃表中维持i级节点同时也是i+1级节点的概率为p。为此，在插入一个新节
点时，先将其节点级别初始化为0，然后用随机数生成器反复地产生一个[0,1]间的随机实数q，如果q<p，则使新节点级别增加1，直至q>=p。由此
产生新节点级别的过程可知，所产生的的新节点的级别为0的概率为1-p，级别为1的概率为p(1-p)，...，级别为i的概率为p^i(1-p)。由于按
这种方式产生的新节点的级别有可能是一个很大的数，从而造成高度过高，进而造成空间浪费，因此我们需要做一个空间和时间之间的平衡，可以
用log1/p(n)作为新节点级别的上界，其中n是当前跳跃表中的节点个数，1/p是基数，在具体实现时，可以用一个预先确定的常数maxLevel来
作为跳跃表中节点级别的上界。